name: Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      maven-settings: ${{ steps.maven-settings.outputs.settings }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configurar chave privada
        run: echo "${{ secrets.JWT_PRIVATE_KEY }}" > src/main/resources/private.key

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Configurar Maven
        id: maven-settings
        run: |
          mkdir -p ~/.m2
          echo "<settings><servers><server><id>github</id><username>${{ secrets.USERNAME }}</username><password>${{ secrets.GITHUB_TOKEN }}</password></server></servers></settings>" > ~/.m2/settings.xml
        continue-on-error: true

  criar-projeto:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restaurar cache do Maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build project
        run: mvn -B clean compile

      - name: Verificar dependências
        run: mvn dependency:resolve

      - name: Executar testes
        run: mvn -B clean test

  deploy-imagem-docker-hub:
    runs-on: ubuntu-latest
    needs: criar-projeto
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restaurar cache do Maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Verificar dependências e package
        run: mvn clean install -DskipTests

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USER }}" --password-stdin

      - name: Extrair versão do pom
        id: extract_version
        run: echo "PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Build imagem docker
        run: |
          docker build . --file Dockerfile --tag users:${{ env.PROJECT_VERSION }}

      - name: Deploy image
        run: |
          docker tag users:${{ env.PROJECT_VERSION }} gacacio/users:${{ env.PROJECT_VERSION }}
          docker push gacacio/users:${{ env.PROJECT_VERSION }}

  incrementar-versao:
    runs-on: ubuntu-latest
    needs: deploy-imagem-docker-hub
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Install xmllint
        run: sudo apt-get install -y libxml2-utils

      - name: Increment version in pom.xml
        id: increment_version
        run: |
          chmod +x ./increment_version.sh
          ./increment_version.sh

      - name: Commit and push version increment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add pom.xml
          git commit -m "Subindo versão para ${{ env.new_version }}"
          git push origin main
